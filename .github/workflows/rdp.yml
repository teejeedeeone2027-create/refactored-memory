name: Optimized Windows RDP for MuMu Emulator

on:
  workflow_dispatch: # Manual trigger only

jobs:
  optimized-rdp-mumu:
    runs-on: windows-latest
    timeout-minutes: 3600 # 60 hour maximum

    steps:
    - name: Enable Virtualization and Hyper-V
      run: |
        Write-Host "=== ENABLING VIRTUALIZATION ==="
        # Enable Hyper-V platform
        Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -NoRestart
        # Enable Hypervisor
        bcdedit /set hypervisorlaunchtype auto
        Write-Host "Virtualization features enabled"

    - name: Optimize System Performance
      run: |
        Write-Host "=== OPTIMIZING SYSTEM PERFORMANCE ==="
        
        # Set to high performance power plan
        powercfg /setactive SCHEME_MIN
        
        # Disable visual effects for better performance
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2
        
        # Optimize for background services
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 18
        
        # Disable unnecessary animations
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "ListviewAlphaSelect" -Value 0
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "ListviewShadow" -Value 0
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "TaskbarAnimations" -Value 0
        
        Write-Host "System performance optimized"

    - name: Configure Virtual Memory
      run: |
        Write-Host "=== CONFIGURING VIRTUAL MEMORY ==="
        
        # Disable automatic page file management
        $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
        $computerSystem.AutomaticManagedPagefile = $false
        $computerSystem.Put()
        
        # Remove existing page file settings
        $currentPageFile = Get-WmiObject -Class Win32_PageFileSetting
        if ($currentPageFile) {
            $currentPageFile.Delete()
        }
        
        # Create new page file with optimal size
        $newPageFile = ([wmiclass]"Win32_PageFileSetting").Create("C:\pagefile.sys")
        $newPageFile.InitialSize = 8192  # 8GB initial
        $newPageFile.MaximumSize = 16384 # 16GB maximum
        $newPageFile.Put()
        
        Write-Host "Virtual memory configured (8GB-16GB)"

    - name: Configure RDP Settings
      run: |
        Write-Host "=== CONFIGURING RDP SETTINGS ==="
        
        # Enable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        
        # Disable NLA for easier connection
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        
        # Configure Windows Firewall
        netsh advfirewall firewall set rule group="remote desktop" new enable=Yes
        
        # Restart Terminal Services
        Restart-Service -Name TermService -Force
        
        Write-Host "RDP configured and enabled"

    - name: Optimize RDP for Graphics Performance
      run: |
        Write-Host "=== OPTIMIZING RDP GRAPHICS ==="
        
        # Improve RDP graphics performance
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "MaxMonitors" -Value 4
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "MaxXResolution" -Value 2560
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "MaxYResolution" -Value 1440
        
        # Enable WDDM driver for better graphics
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "fEnableWddmDriver" -Value 1
        
        # Increase RDP bandwidth limits
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "MaxBandwidth" -Value 0xffffffff
        
        Write-Host "RDP graphics optimized"

    - name: Create RDP User with Secure Password
      run: |
        Write-Host "=== CREATING RDP USER ==="
        
        # Generate secure random password
        $password = -join ((65..90) + (97..122) + (48..57) + (33..47) + (58..64) + (91..96) + (123..126) | Get-Random -Count 16 | ForEach-Object {[char]$_})
        
        Write-Host "Generated password: $password"
        
        $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
        
        # Create user with password
        New-LocalUser -Name "RDPUser" -Password $securePassword -AccountNeverExpires
        
        # Add to required groups
        Add-LocalGroupMember -Group "Administrators" -Member "RDPUser"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPUser"
        
        # Store credentials in environment
        echo "RDP_USER=RDPUser" >> $env:GITHUB_ENV
        echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
        
        Write-Host "RDP user created successfully"
        Write-Host "Username: RDPUser"
        Write-Host "Password: $password"

    - name: Install MuMu Android Emulator
      run: |
        Write-Host "=== INSTALLING MUMU ANDROID EMULATOR ==="
        
        # Download MuMu Emulator (replace with actual download link)
        # Note: You'll need to get the actual download URL from MuMu website
        $mumuUrl = "https://mumu.163.com/global/download/"  # Update this with direct download link
        Invoke-WebRequest -Uri $mumuUrl -OutFile "mumu-installer.exe" -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        
        Write-Host "MuMu downloaded, installing..."
        
        # Install silently
        Start-Process -FilePath "mumu-installer.exe" -ArgumentList "/S" -Wait
        
        Write-Host "Waiting for MuMu services to initialize..."
        Start-Sleep -Seconds 45
        
        Write-Host "MuMu installation completed"

    - name: Configure MuMu Emulator Settings
      run: |
        Write-Host "=== CONFIGURING MUMU SETTINGS ==="
        
        # Wait a bit more for installation to complete
        Start-Sleep -Seconds 30
        
        # Optimize Mumu settings via registry
        Write-Host "Applying performance optimizations..."
        
        # CPU cores (4 cores)
        reg add "HKEY_CURRENT_USER\Software\Netease\MuMuPlayer\Settings" /v "cpu_count" /t REG_DWORD /d 4 /f 2>$null
        
        # Memory size (4GB)
        reg add "HKEY_CURRENT_USER\Software\Netease\MuMuPlayer\Settings" /v "memory_size" /t REG_DWORD /d 4096 /f 2>$null
        
        # Resolution (1280x720 for better performance)
        reg add "HKEY_CURRENT_USER\Software\Netease\MuMuPlayer\Settings" /v "resolution_width" /t REG_DWORD /d 1280 /f 2>$null
        reg add "HKEY_CURRENT_USER\Software\Netease\MuMuPlayer\Settings" /v "resolution_height" /t REG_DWORD /d 720 /f 2>$null
        
        # Frame rate
        reg add "HKEY_CURRENT_USER\Software\Netease\MuMuPlayer\Settings" /v "frame_rate" /t REG_DWORD /d 60 /f 2>$null
        
        # Graphics mode (DirectX for better performance)
        reg add "HKEY_CURRENT_USER\Software\Netease\MuMuPlayer\Settings" /v "graphics_renderer" /t REG_DWORD /d 1 /f 2>$null
        
        Write-Host "MuMu settings configured: 4 CPU cores, 4GB RAM, 1280x720 resolution"

    - name: Install Cloudflared
      run: |
        Write-Host "=== INSTALLING CLOUDFLARED ==="
        
        # Download cloudflared
        Invoke-WebRequest -Uri "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe" -OutFile "cloudflared.exe"
        
        Write-Host "Cloudflared downloaded"

    - name: Start Cloudflare Tunnel for RDP
      run: |
        Write-Host "=== STARTING CLOUDFLARE TUNNEL ==="
        Write-Host "RDP Credentials:"
        Write-Host "Username: $env:RDP_USER"
        Write-Host "Password: $env:RDP_PASSWORD"
        Write-Host ""
        Write-Host "MuMu Emulator has been installed and optimized"
        Write-Host "RDP will be accessible via Cloudflare Tunnel"
        Write-Host "Keep this workflow running and connect via the URL below"
        Write-Host ""
        
        # Start cloudflared tunnel for RDP
        Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel --url rdp://localhost:3389"

    - name: Keep Runner Active and Display Status
      run: |
        Write-Host "=== RDP SESSION ACTIVE ==="
        Write-Host "‚úÖ MuMu Android Emulator is installed and optimized"
        Write-Host "‚úÖ RDP is accessible via Cloudflare Tunnel" 
        Write-Host "üì± MuMu Configuration:"
        Write-Host "   - 4 CPU Cores"
        Write-Host "   - 4GB RAM" 
        Write-Host "   - 1280x720 Resolution"
        Write-Host "   - 60 FPS Target"
        Write-Host ""
        Write-Host "üîë RDP Credentials:"
        Write-Host "   Username: $env:RDP_USER" 
        Write-Host "   Password: $env:RDP_PASSWORD"
        Write-Host ""
        Write-Host "üåê Connect via the Cloudflare Tunnel URL above"
        Write-Host ""
        Write-Host "The runner will stay active until manually stopped"
        Write-Host "Use Ctrl+C in the workflow to terminate when done"
        
        # Display periodic status updates
        $counter = 0
        while ($true) {
            $counter++
            $elapsedMinutes = $counter * 5
            Write-Host "[$(Get-Date)] RDP session active - $elapsedMinutes minutes elapsed - MuMu ready for use"
            Start-Sleep -Seconds 300
        }
